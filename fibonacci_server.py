#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
A RESTful web service that provides the Fibonacci number (starts from 0) for
any given integer less than a predefined number (see "Performance" section in
README.md)
"""

import json
import logging
from logging.handlers import RotatingFileHandler
from flask import Flask, Response
from fibonacci import Fibonacci


class FibonacciServer(object):

    # TODO: introduce a config file to define these
    MAX_ACCEPTABLE_NUMBER = 10000
    MAX_LOG_FILE_BYTES = 50 << 20  # 50 MB
    MAX_LOG_FILE_BACKUP = 9
    RUNTIME_LOG = 'runtime.log'

    def __init__(self, host='127.0.0.1', port=8080):
        self._host = host
        self._port = port
        self._app = Flask(__name__)
        self._init_logging()
        self._add_routes()
        self._fib = Fibonacci()

    def fib(self, version, number):
        """Handles the `GET /:version/fib/:number` request. Status goes to
        header, data goes to body in JSON.

        Status codes are:
            - 200 OK
            - 400 BAD REQUEST (invalid parameter)
            - 403 REQUEST ENTITY TOO LARGE (input number too large)
            - 500 INTERNAL SERVER ERROR (unknown exception)
            - 501 NOT IMPLEMENTED (not supported API)
        """
        if version != 'v1':
            return self._response(501)
        try:
            n = int(number)
        except ValueError:
            return self._response(400)
        if n < 0:
            return self._response(400)
        elif n > self.MAX_ACCEPTABLE_NUMBER:
            return self._response(413)

        try:
            seq = self._fib.sequence(n)
            return self._response(200, seq)
        except:
            return self._response(500)

    def run(self):
        self._app.run(host=self._host, port=self._port)

    def _init_logging(self):
        """Configure web log generated by werkzeug to use 'runtime.log'
        """
        handler = RotatingFileHandler(
            self.RUNTIME_LOG, maxBytes=self.MAX_LOG_FILE_BYTES,
            backupCount=self.MAX_LOG_FILE_BACKUP)
        logger = logging.getLogger('werkzeug')
        logger.addHandler(handler)
        logger.setLevel(logging.INFO)  # Turns off console log

    def _add_routes(self):
        self._app.add_url_rule(
            '/<version>/fib/<number>', endpoint='fib', view_func=self.fib)

    def _response(self, status, data=None):
        data = data or []
        return Response(json.dumps(data), status=status,
                        mimetype='application/json')

    def _test_client(self):
        return self._app.test_client()


if __name__ == '__main__':  # pragma: no cover
    from optparse import OptionParser

    parser = OptionParser(usage='%prog [options]')
    parser.add_option('-b', '--bind', default='127.0.0.1',
                      help=('Bind address, default 127.0.0.1, use '
                            '"0.0.0.0" for all'))
    parser.add_option('-p', '--port', type='int', default=8080,
                      help='Listen port, default is 8080')
    opts, _ = parser.parse_args()

    server = FibonacciServer(host=opts.bind, port=opts.port)
    server.run()
